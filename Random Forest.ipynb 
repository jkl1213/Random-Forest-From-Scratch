{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**STAT 4609 Assignment 1**\n",
    "\n",
    "Name: Tang King Lok UID: 3035366805"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Part 1\n",
    "- Please compare Decision Tree method, and Random Forest for classification task. If necessary, please include references properly.\n",
    "\n",
    "- Please illustrate how you could implement random forest with the help of python class DecisionTree. You can write some pseudo code for better illustration.\n",
    "\n",
    "The random forest model is made of many decision trees, which make decisions collectively, as opposed to the decision tree method, which only relies on a single tree. Random forest trains a large number of decision trees independently, which results in many uncorrelated decision tree models. This can improve the accuracy score from a single decsion tree greatly as it prevents overfitting (which a single decision tree tends to do, resulting in lower testing accuracy). Unlike the single decision tree, random forest can also be used to get a 'distance matrix' of the observations as we can count how many trees classify any two observations into the same label, i.e. the more trees, the more similar these two observations are. This can be useful as we can then use the distance matrix to perform other statistical analysis, such as multidimensional scaling (MDS). In addition, random forest is a form of ensemble learning which uses bagging to prevent overfitting.\n",
    "\n",
    "\n",
    "\n",
    "We could implement random forest by making a random forest class, which has the hyperparameters such as number of variables in a tree and bootstrap data size. The random forest class will then have a fit method that can generate bootstrap indices and pass the indices one by one to another function called creat_tree. The create tree function will then construct a decision class as done in the tutorial. This decision class will hold the the index and variable selection and generate a decision tree based on the bootstrap. The tree is stored in a list object in python. We repeat this process n times by looping in the fit method of random forest. In the end we have n distinct decision trees in the forest.\n",
    "\n",
    "Finally, we predict new data by asking each decision tree to predict the label. We then make prediction based which label is the most popular among the trees."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Part 2\n",
    "- 1. Modify the decision tree\n",
    "- 2. Implement random forest from scratch\n",
    "- 3. Testing model on test data, report accuracy and visualise results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "#%matplotlib notebook\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "from IPython.core.debugger import set_trace\n",
    "np.random.seed(1234)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This part is the same as the tutorial where you implement a single decision tree from scratch:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "#GIVEN A NODE AND COST FUNCTION, IT LOOPS THROUGH ALL POSSIBLE SPLIT IN ALL FEATURES AND VALUES UNTIL \n",
    "#IT FINS THE BEST ONE\n",
    "#Define split function\n",
    "def greedy_test(node, cost_fn):\n",
    "    #initialize the best parameter values\n",
    "    best_cost = np.inf\n",
    "    best_feature, best_value = None, None\n",
    "    num_instances, num_features = node.data.shape\n",
    "    #sort the features to get the test value candidates by taking the average of consecutive sorted feature values \n",
    "    data_sorted = np.sort(node.data[node.data_indices],axis=0)\n",
    "    #all the \"cutting points\" between two sorted data points by averaging two consecutive data\n",
    "    test_candidates = (data_sorted[1:] + data_sorted[:-1]) / 2.\n",
    "    #print(\"node.data_indices:\",node.data_indices)\n",
    "    #print(\"data_sorted:\",data_sorted)\n",
    "    #print(\"data_sorted[:-1]:\",data_sorted[:-1])\n",
    "    #print(\"test_candidates:\",test_candidates)\n",
    "    for f in range(num_features):\n",
    "        #stores the data corresponding to the f-th feature\n",
    "        data_f = node.data[node.data_indices, f]\n",
    "        for test in test_candidates[:,f]:\n",
    "            #Split the indices using the test value of f-th feature\n",
    "            left_indices = node.data_indices[data_f <= test]\n",
    "            right_indices = node.data_indices[data_f > test]\n",
    "            \n",
    "            #we can't have a split where a child has zero element\n",
    "            #if this is true over all the test features and their test values  then the function returns the best cost as infinity\n",
    "            #the command 'continue' means the rest of statements are all rejected if either child has zero element\n",
    "            if len(left_indices) == 0 or len(right_indices) == 0:                \n",
    "                continue\n",
    "            #compute the left and right cost based on the current split                                                         \n",
    "            left_cost = cost_fn(node.labels[left_indices])\n",
    "            \n",
    "            right_cost = cost_fn(node.labels[right_indices])\n",
    "            num_left, num_right = left_indices.shape[0], right_indices.shape[0]\n",
    "            #get the combined cost using the weighted sum of left and right cost\n",
    "            cost = (num_left * left_cost + num_right * right_cost)/num_instances\n",
    "            #update only when a lower cost is encountered\n",
    "            if cost < best_cost:\n",
    "                best_cost = cost\n",
    "                best_feature = f\n",
    "                best_value = test\n",
    "    return best_cost, best_feature, best_value\n",
    "#Define cost function \n",
    "def cost_misclassification(labels):\n",
    "    counts = np.bincount(labels) \n",
    "    class_probs = counts / np.sum(counts)\n",
    "    #you could compress both the steps above by doing class_probs = np.bincount(labels) / len(labels)\n",
    "    return 1 - np.max(class_probs)\n",
    "#computes the gini index cost\n",
    "def cost_gini_index(labels):\n",
    "    class_probs = np.bincount(labels) / len(labels)\n",
    "    return 1 - np.sum(np.square(class_probs)) \n",
    "#Define a node \n",
    "class Node:\n",
    "    #data_indices = number of data points = data.shape[0] ; parent = None at the beginning \n",
    "    #(so if parent resutls in false)\n",
    "    def __init__(self, data_indices, parent):\n",
    "        self.data_indices = data_indices                    #stores the data indices which are in the region defined by this node\n",
    "        self.left = None                                    #stores the left child of the node \n",
    "        self.right = None                                   #stores the right child of the node\n",
    "        self.split_feature = None                           #the feature for split at this node\n",
    "        self.split_value = None                             #the value of the feature for split at this node\n",
    "        if parent:\n",
    "            self.depth = parent.depth + 1                   #obtain the dept of the node by adding one to dept of the parent \n",
    "            self.num_classes = parent.num_classes           #copies the num classes from the parent \n",
    "            self.data = parent.data                         #copies the data from the parent\n",
    "            self.labels = parent.labels                     #copies the labels from the parent\n",
    "            #returns the frequency array of labels, eg. 1,1,3\n",
    "            class_prob = np.bincount(self.labels[data_indices], minlength=self.num_classes) #this is counting frequency of different labels in the region defined by this node\n",
    "            #returns the probability array of labels, eg.0.2 0.2 0.6\n",
    "            self.class_prob = class_prob / np.sum(class_prob)  #stores the class probability for the node\n",
    "            #note that we'll use the class probabilites of the leaf nodes for making predictions after the tree is built\n",
    "\n",
    "            #Define a decision tree\n",
    "class DecisionTree:\n",
    "    \n",
    "    #determining hyperparameters\n",
    "    def __init__(self, idx, f_idx, num_classes=None, max_depth=3, cost_fn=cost_gini_index, min_leaf_instances=1):\n",
    "        self.max_depth = max_depth      #maximum dept for termination \n",
    "        #empty root at the beginning\n",
    "        self.root = None                #stores the root of the decision tree \n",
    "        self.cost_fn = cost_fn          #stores the cost function of the decision tree \n",
    "        self.num_classes = num_classes  #stores the total number of classes\n",
    "        self.min_leaf_instances = min_leaf_instances  #minimum number of instances in a leaf for termination\n",
    "        self.idx = idx\n",
    "        self.f_idx = f_idx\n",
    "    \n",
    "    def fit(self, data, labels):\n",
    "        pass                            #pass in python 3 means nothing happens and the method here is empty\n",
    "    \n",
    "    def predict(self, data_test):\n",
    "        pass\n",
    "\n",
    "def fit(self, data, labels):\n",
    "    self.data = data\n",
    "    self.labels = labels\n",
    "    if self.num_classes is None:\n",
    "        self.num_classes = np.max(labels) + 1\n",
    "    #below are initialization of the root of the decision tree \n",
    "    #(setting up the node object for the root)\n",
    "    self.root = Node(np.arange(data.shape[0]), None)\n",
    "    #since the 'if parent' will be false at the beginning due to None argument above\n",
    "    #we have to set up data and labels ourselves at the beginning\n",
    "    self.root.data = data\n",
    "    self.root.labels = labels\n",
    "    self.root.num_classes = self.num_classes\n",
    "    self.root.depth = 0\n",
    "    #to recursively build the rest of the tree\n",
    "    self._fit_tree(self.root)\n",
    "    return self\n",
    "def _fit_tree(self, node):\n",
    "    \n",
    "    #this gives condition for stopping loop later on\n",
    "    #check that we do not terminate the tree development due to max depth requirement\n",
    "    #This gives the condition for termination of the recursion resulting in a leaf node\n",
    "    if node.depth == self.max_depth or len(node.data_indices) <= self.min_leaf_instances:\n",
    "        return\n",
    "    \n",
    "    #greedily select the best test by minimizing the cost\n",
    "    cost, split_feature, split_value = greedy_test(node, self.cost_fn)\n",
    "    #if the cost returned is infinity it means that it is not possible to split the node and hence terminate\n",
    "    if np.isinf(cost):\n",
    "        return\n",
    "    #print(f'best feature: {split_feature}, value {split_value}, cost {cost}')\n",
    "    #to get a boolean array confirming data indices corresponding to this node are in the left of the split\n",
    "    test = node.data[node.data_indices,split_feature] <= split_value\n",
    "    #store the split feature and value of the node\n",
    "    node.split_feature = split_feature\n",
    "    node.split_value = split_value\n",
    "    #define new nodes which are going to be the left and right child of the present node\n",
    "    left = Node(node.data_indices[test], node)\n",
    "    right = Node(node.data_indices[np.logical_not(test)], node)\n",
    "\n",
    "    #recursive call to the _fit_tree()\n",
    "    #the loop will stop when the condition in the first line above is reached\n",
    "    self._fit_tree(left)\n",
    "    self._fit_tree(right)\n",
    "    #assign the left and right child to present child (node.left is also a node)\n",
    "    node.left = left\n",
    "    node.right = right\n",
    "\n",
    "DecisionTree.fit = fit\n",
    "DecisionTree._fit_tree = _fit_tree\n",
    "\n",
    "def predict(self, data_test):\n",
    "    class_probs = np.zeros((data_test.shape[0], self.num_classes))\n",
    "    for n, x in enumerate(data_test):\n",
    "        node = self.root\n",
    "        #loop along the depth of the tree looking region where the present data sample fall in based on the split feature and value\n",
    "        while node.left:\n",
    "            #print(\"x: \",x)\n",
    "            #print(\"node.split_feature: \",node.split_feature)\n",
    "            #print(\"node.split_value: \",node.split_value)\n",
    "            if x[node.split_feature] <= node.split_value:\n",
    "                node = node.left\n",
    "            else:\n",
    "                node = node.right\n",
    "        #the loop terminates when you reach a leaf of the tree and the class probability of that node is taken for prediction\n",
    "        class_probs[n,:] = node.class_prob\n",
    "    return class_probs\n",
    "\n",
    "DecisionTree.predict = predict\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we add the extra functionalities that random forest requires. \n",
    "1. We write a function to get bootstrapped data given randomly generated index and m random variables \n",
    "2. We write a random forest class. Its fit method generates all the indices and then calls the __create_tree__ function one at a time to create a single decision tree. The process is repeated until we have enough trees. All the trees are stored in a list object.\n",
    "3. The prediction is made by fitting testing data X to all the trees that we created. The trees will 'vote' for their predicted labels. We choose the label that most trees voted for.\n",
    "4. We design an accuracy function that can count how many testing data we predicted correctly to get a percentage for correct predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define a function to get a bootstrapped sample given a bootstrapped index and a variable array\n",
    "def get_bts(x,y,idx,f_idx):\n",
    "        \n",
    "    #get a bootstrap sample index given data\n",
    "    #data = np.array([[1,2,1],[3,4,3],[5,6,5],[9,0,7]])\n",
    "    #y = np.array([[1],[0],[0],[2]])\n",
    "    data = x\n",
    "    y = y\n",
    "    m = len(y)\n",
    "    subdata = data[idx[0],f_idx].reshape(1,m)\n",
    "    suby = y[idx[0]].reshape(1,1)\n",
    "\n",
    "    for i in idx[1:]:\n",
    "        newdata = data[i,f_idx].reshape(1,m)\n",
    "        newy = y[i].reshape(1,1)\n",
    "        suby = np.concatenate((suby, newy))\n",
    "        subdata = np.concatenate((subdata, newdata))\n",
    "\n",
    "    #get the bootstrapped data with m variables in a dataframe\n",
    "    subdata_df = pd.DataFrame(subdata, columns=f_idx, index = idx)\n",
    "\n",
    "    #subdata array for the fit function\n",
    "    subdata_array_x = subdata\n",
    "    subdata_array_x\n",
    "    #subdata label array for the fit function\n",
    "    subdata_array_y = suby\n",
    "    #print(\"subdata_array_x:\",subdata_array_x)\n",
    "    #print(\"subdata_array_y:\",subdata_array_y)\n",
    "    return subdata_array_x,subdata_array_y\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define a random forest \n",
    "class RandomForest():\n",
    "    def __init__(self, depth=10, min_leaf=5, n_trees = 8, n_features='log2', sample_sz = 20, cost_fn =cost_misclassification):\n",
    "        np.random.seed(12)\n",
    "        self.depth, self.min_leaf = depth, min_leaf \n",
    "        self.n_trees = n_trees \n",
    "        self.sample_sz, self.n_features =  sample_sz, n_features\n",
    "        self.cost_fn = cost_fn\n",
    "        self.forest = []\n",
    "        self.total_idx = None\n",
    "        self.total_f_idx = None\n",
    "        self.m = None\n",
    "    def get_bts(self,x,y,idx,f_idx):\n",
    "        \n",
    "        #get a bootstrap sample index given data\n",
    "        #data = np.array([[1,2,1],[3,4,3],[5,6,5],[9,0,7]])\n",
    "        #y = np.array([[1],[0],[0],[2]])\n",
    "        data = x\n",
    "        y = y\n",
    "        \n",
    "        subdata = data[idx[0],f_idx].reshape(1,self.m)\n",
    "        suby = y[idx[0]].reshape(1,1)\n",
    "\n",
    "        for i in idx[1:]:\n",
    "            newdata = data[i,f_idx].reshape(1,self.m)\n",
    "            newy = y[i].reshape(1,1)\n",
    "            suby = np.concatenate((suby, newy))\n",
    "            subdata = np.concatenate((subdata, newdata))\n",
    "\n",
    "        #get the bootstrapped data with m variables in a dataframe\n",
    "        subdata_df = pd.DataFrame(subdata, columns=f_idx, index = idx)\n",
    "\n",
    "        #subdata array for the fit function\n",
    "        subdata_array_x = subdata\n",
    "        subdata_array_x\n",
    "        #subdata label array for the fit function\n",
    "        subdata_array_y = suby\n",
    "        #print(\"subdata_array_x:\",subdata_array_x)\n",
    "        #print(\"subdata_array_y:\",subdata_array_y)\n",
    "        \n",
    "        return subdata_array_x,subdata_array_y\n",
    "\n",
    "    def fit(self, x, y):\n",
    "        #---------- fit training data with the help of function __create_tree__ -----# \n",
    "        #step 1: generate 8 bootstraps by sampling with replacement original data index\n",
    "        total_idx = []\n",
    "        total_f_idx = []\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "        #for each bt, we fit a decision tree to the subdata\n",
    "        for i in range(self.n_trees):\n",
    "            \n",
    "            #generate bts\n",
    "            idx = np.random.choice(np.arange(len(x)),self.sample_sz,replace=True)\n",
    "            total_features = x.shape[1]\n",
    "            if self.n_features == 'log2':\n",
    "                self.m = round(np.log(total_features)/np.log(2))\n",
    "            elif self.n_features == 'sqrt':\n",
    "                self.m = round(np.sqrt(total_features))\n",
    "            \n",
    "            f_idx = np.random.choice(np.arange(x.shape[1]),round(self.m),replace=False)\n",
    "            total_idx.append(idx)\n",
    "            total_f_idx.append(f_idx)\n",
    "            \n",
    "            #fit a decision tree given generated index and m variables to bts\n",
    "            #print(\"total_idx[i]\",total_idx[i])\n",
    "            #print(\"total_f_idx[i]\",total_f_idx[i])\n",
    "            tree = self.__create_tree__(total_idx[i],total_f_idx[i])\n",
    "            self.forest.append(tree)\n",
    "            \n",
    "            self.total_idx = total_idx\n",
    "            self.total_f_idx = total_f_idx\n",
    "        \n",
    "        # --- implete step 1 -------#\n",
    "        pass\n",
    "    \n",
    "    def __create_tree__(self,idx,f_idx):\n",
    "        #---------- create and return one decision tree ---------------------#\n",
    "        #---  implete (a) and (b) of step 1 in random forest the algorithm in this python method ---- # \n",
    "        #(a)\n",
    "        subx, subyy = self.get_bts(self.x,self.y,idx,f_idx)\n",
    "        suby = subyy.reshape(-1,)\n",
    "        #print(\"subx\",subx)\n",
    "        #print(\"suby\",suby)\n",
    "        #Fitting data to decision tree with added idx and f_idx argument\n",
    "        model = DecisionTree(idx,f_idx,max_depth=20)\n",
    "        decision_tree = model.fit(subx,suby)\n",
    "        return decision_tree\n",
    "        #t = decision_tree.fit(subx, suby)\n",
    "        \n",
    "        \n",
    "        # self.trees = [...]\n",
    "        \n",
    "        # return DecisionTree(...)\n",
    "         \n",
    "        \n",
    "    def predict(self, x):\n",
    "        #---------- return the predicted probability for test data ----------#\n",
    "        \n",
    "        votes = []\n",
    "        for j in range(x.shape[0]):\n",
    "            data = x[j,:]\n",
    "            #print(data)\n",
    "            vote = np.zeros(3)\n",
    "            for i in range(self.n_trees):\n",
    "                #print(self.total_f_idx[i])\n",
    "                features = self.total_f_idx[i]\n",
    "                t = self.forest[i]\n",
    "               \n",
    "                processed_x = data[features].reshape(1,-1)\n",
    "                #print(\"processed_x:\",processed_x)\n",
    "                #print(\"pred:\", t.predict(processed_x))\n",
    "                pred = t.predict(processed_x)\n",
    "                vote = np.sum([vote, pred], axis=0)\n",
    "            \n",
    "            #the results for all test data is in votes eg. array([8,0,0],[7,1,0]) \n",
    "            #for two test data\n",
    "            votes.append(vote)\n",
    "            \n",
    "        return votes "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Part 3 experiments and visualization\n",
    "- Finally, we test out model on the iris dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import datasets\n",
    "dataset = datasets.load_iris()\n",
    "x, y = dataset['data'][:,:], dataset['target']\n",
    "(num_instances, num_features), num_classes = x.shape, np.max(y)+1\n",
    "inds = np.random.permutation(num_instances)\n",
    "#train-test split)\n",
    "x_train, y_train = x[inds[:100]], y[inds[:100]]\n",
    "x_test, y_test = x[inds[100:]], y[inds[100:]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf = RandomForest()\n",
    "model = rf.fit(x_train,y_train)\n",
    "results = rf.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "#define a function to get the accuracy scores\n",
    "def get_accuracy(results,answer):\n",
    "    #results is a list of votes eg. [[8,0,0],[2,4,6]] answer is array of labels [1,0,0,1,2]\n",
    "    answer = y_test\n",
    "    right = 0\n",
    "    wrong = 0\n",
    "    record = np.zeros(len(results))\n",
    "    y_pred = np.zeros(len(results))\n",
    "    for i in range(len(results)):\n",
    "        #the predicted label is the one with the highest vote\n",
    "        if np.argmax(results[i][0]) == y_test[i]:\n",
    "            right = right + 1\n",
    "            record[i] = 1\n",
    "            y_pred[i] = np.argmax(results[i][0])\n",
    "        else:\n",
    "            wrong = wrong + 1\n",
    "        \n",
    "    #print(right/(right+wrong))\n",
    "    #print(\"y_pred:\",y_pred)\n",
    "    accuracy = right/(right+wrong)\n",
    "    return accuracy, record, y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The percentage for correct predictions is:  96 %\n"
     ]
    }
   ],
   "source": [
    "#Get the percentage of correct guesses in the testing set\n",
    "print(\"The percentage for correct predictions is: \", round(get_accuracy(results,y_test)[0]*100),\"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#visualization\n",
    "y_pred = get_accuracy(results,y_test)[2]\n",
    "correct = np.array(get_accuracy(results,y_test)[1],dtype=bool)\n",
    "incorrect = np.logical_not(correct)\n",
    "plt.scatter(x_train[:,0], x_train[:,1], c=y_train, marker='o', alpha=.2, label='train')\n",
    "plt.scatter(x_test[correct,0], x_test[correct,1], marker='.', c=y_pred[correct], label='correct')\n",
    "plt.scatter(x_test[incorrect,0], x_test[incorrect,1], marker='x', c=y_test[incorrect], label='misclassified')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
